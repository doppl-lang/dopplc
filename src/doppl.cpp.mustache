#include "lib/doppl.hpp"

using namespace doppl;
using std::string;
using byte = unsigned char;

//Stdin and stdout
static input_t input;
static output_t output;

int {{ header.id }}() {
    const int range = {{ header.range }};

    //Data oriented private task members
    {{#private_members}}
    std::array<
        {{ semantics.action_semantic }}<{{{ type }}}>,
        {{ header.range }}
    > _{{ id }};
    {{/private_members}}

    //Shared task members
    {{#shared_members}}
    shared<{{ semantics.action_semantic }}<{{{ type }}}>> {{ id }};
    {{/shared_members}}

    //Task body
    auto task_body = [&] (
                //Task id
                const int tid
            ) -> int {    
        //Doppl runtime loop
        std::promise<void> global_yield;
        task_loop<void> loop;

        //Private Members
        {{#private_members}}
        decltype(_{{ id }}[tid])& {{ id }} = _{{ id }}[tid];
        {{/private_members}}
        
        //States
        {{#states}}
        {{ semantics.action_semantic }}<{{{ type }}}> {{ id }};
        {{/states}}

        //State bodies
        {{#states}}
            {{{state_bodie}}}
        {{/states}}

        return loop(init, global_yield);
    };

    //Return
    return doppl_run<range>(task_body);
};

//Start runtime
int main() {
    assert({{ header.id }}() == 0);
    return 0;
};
